---
source: fixtures/tests/snapshot.rs
expression: expansion
---
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2021::*;
use std::path::Path;
use fixtures::fixtures;
fn test(_path: &Path) {}
mod test {
    use super::*;
    extern crate test;
    #[rustc_test_marker = "test::file_1_dot_txt"]
    #[doc(hidden)]
    pub const file_1_dot_txt: test::TestDescAndFn = test::TestDescAndFn {
        desc: test::TestDesc {
            name: test::StaticTestName("test::file_1_dot_txt"),
            ignore: false,
            ignore_message: ::core::option::Option::None,
            source_file: "fixtures/examples/multiple_fixtures.rs",
            start_line: 8usize,
            start_col: 4usize,
            end_line: 8usize,
            end_col: 8usize,
            compile_fail: false,
            no_run: false,
            should_panic: test::ShouldPanic::No,
            test_type: test::TestType::Unknown,
        },
        testfn: test::StaticTestFn(
            #[coverage(off)]
            || test::assert_test_result(file_1_dot_txt()),
        ),
    };
    pub fn file_1_dot_txt() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/multiple_fixtures/file_1.txt",
            ),
        )
    }
    extern crate test;
    #[rustc_test_marker = "test::file_2_dot_txt"]
    #[doc(hidden)]
    pub const file_2_dot_txt: test::TestDescAndFn = test::TestDescAndFn {
        desc: test::TestDesc {
            name: test::StaticTestName("test::file_2_dot_txt"),
            ignore: false,
            ignore_message: ::core::option::Option::None,
            source_file: "fixtures/examples/multiple_fixtures.rs",
            start_line: 8usize,
            start_col: 4usize,
            end_line: 8usize,
            end_col: 8usize,
            compile_fail: false,
            no_run: false,
            should_panic: test::ShouldPanic::No,
            test_type: test::TestType::Unknown,
        },
        testfn: test::StaticTestFn(
            #[coverage(off)]
            || test::assert_test_result(file_2_dot_txt()),
        ),
    };
    pub fn file_2_dot_txt() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/multiple_fixtures/file_2.txt",
            ),
        )
    }
    pub const EXPANSIONS: &[fn()] = &[file_1_dot_txt, file_2_dot_txt];
}
#[allow(dead_code)]
fn main() {}
#[rustc_main]
#[coverage(off)]
#[doc(hidden)]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[&file_1_dot_txt, &file_2_dot_txt])
}
