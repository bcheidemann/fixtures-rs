---
source: fixtures/tests/snapshot.rs
expression: expansion
---
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2021::*;
use std::path::Path;
use fixtures::fixtures;
fn test(_path: &Path) {}
mod test {
    use super::*;
    pub fn _priv() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/priv",
            ),
        )
    }
    pub fn _crate() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/crate",
            ),
        )
    }
    pub fn _else() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/else",
            ),
        )
    }
    pub fn _move() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/move",
            ),
        )
    }
    pub fn _static() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/static",
            ),
        )
    }
    pub fn __() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/_",
            ),
        )
    }
    pub fn _type() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/type",
            ),
        )
    }
    pub fn _enum() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/enum",
            ),
        )
    }
    pub fn _typeof() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/typeof",
            ),
        )
    }
    pub fn _unsized() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/unsized",
            ),
        )
    }
    pub fn _const() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/const",
            ),
        )
    }
    pub fn _return() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/return",
            ),
        )
    }
    pub fn _pub() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/pub",
            ),
        )
    }
    pub fn _in() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/in",
            ),
        )
    }
    pub fn _extern() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/extern",
            ),
        )
    }
    pub fn _fn() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/fn",
            ),
        )
    }
    pub fn _async() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/async",
            ),
        )
    }
    pub fn _use() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/use",
            ),
        )
    }
    pub fn _impl() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/impl",
            ),
        )
    }
    pub fn _false() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/false",
            ),
        )
    }
    pub fn _mod() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/mod",
            ),
        )
    }
    pub fn _match() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/match",
            ),
        )
    }
    pub fn _override() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/override",
            ),
        )
    }
    pub fn _yield() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/yield",
            ),
        )
    }
    pub fn _0_numeric_prefix_dot_txt() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/0_numeric_prefix.txt",
            ),
        )
    }
    pub fn _become() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/become",
            ),
        )
    }
    pub fn _do() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/do",
            ),
        )
    }
    pub fn _trait() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/trait",
            ),
        )
    }
    pub fn _mut() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/mut",
            ),
        )
    }
    pub fn _as() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/as",
            ),
        )
    }
    pub fn _true() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/true",
            ),
        )
    }
    pub fn _for() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/for",
            ),
        )
    }
    pub fn _virtual() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/virtual",
            ),
        )
    }
    pub fn _break() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/break",
            ),
        )
    }
    pub fn _let() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/let",
            ),
        )
    }
    pub fn _abstract() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/abstract",
            ),
        )
    }
    pub fn _final() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/final",
            ),
        )
    }
    pub fn _if() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/if",
            ),
        )
    }
    pub fn _macro() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/macro",
            ),
        )
    }
    pub fn _super() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/super",
            ),
        )
    }
    pub fn _gen() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/gen",
            ),
        )
    }
    pub fn _loop() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/loop",
            ),
        )
    }
    pub fn _struct() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/struct",
            ),
        )
    }
    pub fn _where() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/where",
            ),
        )
    }
    pub fn _while() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/while",
            ),
        )
    }
    pub fn _dyn() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/dyn",
            ),
        )
    }
    pub fn _unsafe() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/unsafe",
            ),
        )
    }
    pub fn _self() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/self",
            ),
        )
    }
    pub fn _await() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/await",
            ),
        )
    }
    pub fn _ref() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/ref",
            ),
        )
    }
    pub fn _continue() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/continue",
            ),
        )
    }
    pub fn _try() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/try",
            ),
        )
    }
    pub fn _box() {
        test(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/invalid_identifiers/box",
            ),
        )
    }
    pub const EXPANSIONS: &[fn()] = &[
        _priv,
        _crate,
        _else,
        _move,
        _static,
        __,
        _type,
        _enum,
        _typeof,
        _unsized,
        _const,
        _return,
        _pub,
        _in,
        _extern,
        _fn,
        _async,
        _use,
        _impl,
        _false,
        _mod,
        _match,
        _override,
        _yield,
        _0_numeric_prefix_dot_txt,
        _become,
        _do,
        _trait,
        _mut,
        _as,
        _true,
        _for,
        _virtual,
        _break,
        _let,
        _abstract,
        _final,
        _if,
        _macro,
        _super,
        _gen,
        _loop,
        _struct,
        _where,
        _while,
        _dyn,
        _unsafe,
        _self,
        _await,
        _ref,
        _continue,
        _try,
        _box,
    ];
}
#[allow(dead_code)]
fn main() {}
#[rustc_main]
#[coverage(off)]
#[doc(hidden)]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[])
}
