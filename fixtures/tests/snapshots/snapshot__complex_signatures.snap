---
source: fixtures/tests/snapshot.rs
expression: expansion
---
#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::path::Path;
use fixtures::fixtures;
fn complex_fn(
    _path: &Path,
    _owned: String,
    _mutable: &mut String,
    _borrowed: &str,
) -> Result<String, ()> {
    Ok("hello world!".to_string())
}
fn complex_fn_file_1_dot_txt(
    _owned: String,
    _mutable: &mut String,
    _borrowed: &str,
) -> Result<String, ()> {
    complex_fn::file_1_dot_txt(_owned, _mutable, _borrowed)
}
mod complex_fn {
    use super::*;
    pub fn file_1_dot_txt(
        _owned: String,
        _mutable: &mut String,
        _borrowed: &str,
    ) -> Result<String, ()> {
        complex_fn(
            ::std::path::Path::new(
                "<repo>/tests/fixtures/complex_signatures/file_1.txt",
            ),
            _owned,
            _mutable,
            _borrowed,
        )
    }
    pub const EXPANSIONS: &[fn(
        _owned: String,
        _mutable: &mut String,
        _borrowed: &str,
    ) -> Result<String, ()>] = &[file_1_dot_txt];
}
#[allow(dead_code)]
fn main() {
    complex_fn::file_1_dot_txt(
            "owned".to_string(),
            &mut "mutable".to_string(),
            "borrowed",
        )
        .unwrap();
}
#[rustc_main]
#[coverage(off)]
#[doc(hidden)]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[])
}
